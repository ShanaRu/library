{"remainingRequest":"D:\\IBM课件和代码\\work\\library\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\IBM课件和代码\\work\\library\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IBM课件和代码\\work\\library\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IBM课件和代码\\work\\library\\src\\components\\user\\borrowingHistory.vue?vue&type=template&id=2c0a826b&scoped=true&","dependencies":[{"path":"D:\\IBM课件和代码\\work\\library\\src\\components\\user\\borrowingHistory.vue","mtime":1606310589497},{"path":"D:\\IBM课件和代码\\work\\library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IBM课件和代码\\work\\library\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\IBM课件和代码\\work\\library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IBM课件和代码\\work\\library\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}